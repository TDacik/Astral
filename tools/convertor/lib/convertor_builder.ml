open Convertor_sig

module Input = Context
open Input

module Make (Convertor : CONVERTOR_BASE) = struct

  include Convertor

  let comment str = Format.asprintf "%s %s" Convertor.comment_prefix str

  (** Conversion *)

  let header = comment "Generated by Astral (see https://github.com/TDacik/Astral)"

  let declarations input =
    let vars =
      List.map Convertor.declare_var input.vars
      |> String.concat "\n"
    in
    let sorts =
      List.map SSL.Variable.get_sort input.vars
      |> List.sort_uniq Sort.compare
      |> List.map Convertor.declare_sort
      |> String.concat "\n"
    in
    Format.asprintf "%s%s%s\n%s"
      (Convertor.declare_ls)
      (Convertor.declare_dls)
      sorts
      vars

  let convert_formula input =
    if Convertor.supports_sat then Convertor.convert_assert input.phi
    else Convertor.convert_assert (Input.sat_to_entl input).phi

  let convert input =
    Format.asprintf ("%s\n\n%s\n\n%s\n\n%s\n\n%s")
      header
      (Convertor.set_status input)
      (declarations input)
      (convert_formula input)
      Convertor.command

  let dump file input =
    let converted = convert input in
    let channel = open_out_gen [Open_creat; Open_wronly] 0o666 (file ^ Convertor.suffix) in
    Printf.fprintf channel "%s" converted;
    close_out channel

end
