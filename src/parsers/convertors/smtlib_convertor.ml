(* Output to smtlib format
 *
 * Author: Tomas Dacik (xdacik00@fit.vutbr.cz), 2022 *)

open SSL

module F = Format

(* === Indentation managment === *)

let indent_increment = 2

let current_indent = ref 0

let increase_indent () = current_indent := !current_indent + indent_increment

let decrease_indent () = current_indent := !current_indent - indent_increment

let indent () = BatString.make !current_indent ' '

(* === Printer === *)

let header =
"; Generated by Astral\n
(set-logic QF_ALL)
(declare-sort Loc 0)
(declare-heap (Loc Loc))
"

let pretty_var var =
  if SSL.Variable.is_nil var
  then "(as sep.nil Loc)"
  else Variable.show var

let translate_vars phi =
  SSL.get_vars phi
  |> List.filter (fun v -> not @@ SSL.Variable.is_nil v)
  |> List.map pretty_var
  |> List.sort_uniq String.compare
  |> List.map (F.asprintf "(declare-const %s Loc)")
  |> String.concat "\n"

let rec pretty_atom phi =
  let str, v1, v2 = match phi with
    | LS (v1, v2) -> ("ls", v1, v2)
    | PointsTo (v1, v2) -> ("pto", v1, v2)
    | Eq (v1, v2) -> ("=", v1, v2)
    | Neq (v1, v2) -> ("distinct", v1, v2)
  in
  let v1, v2 = pretty v1, pretty v2 in
  Format.asprintf "\n%s(%s %s %s)" (indent ()) str v1 v2

and pretty phi =
  if SSL.is_atom phi then () else increase_indent ();
  let res = match phi with
  | Var v -> pretty_var v
  | And (f1, f2) -> F.asprintf "(and %s %s" (pretty f1) (pretty f2)
  | Or (f1, f2) -> F.asprintf "(or %s %s" (pretty f1) (pretty f2)
  | Not f -> F.asprintf "(not %s" (pretty f)
  | GuardedNeg (f1, f2) -> F.asprintf "(and %s (not %s)" (pretty f1) (pretty f2)
  | Star (f1, f2) -> F.asprintf "(sep %s %s" (pretty f1) (pretty f2)
  | Septraction (f1, f2) -> F.asprintf "(not (wand %s (not %s))"
      (pretty f1) (pretty f2)
  | _ -> pretty_atom phi
  in
  if SSL.is_atom phi
  then begin
    res
  end
  else begin
    let _indent = indent () in
    decrease_indent ();
    "\n" ^ _indent ^ res ^ "\n" ^ (indent ()) ^ ")\n"
  end

let translate_all phi =
  header
  ^ "\n"
  ^ (translate_vars phi)
  ^ "\n\n"
  ^ "(assert "
  ^ (pretty phi)
  ^ ")\n\n"
  ^ "(check-sat)"

let dump file phi status =
  let channel = open_out_gen [Open_creat; Open_wronly] 0o666 file in
  Printf.fprintf channel "(set-option :status %s)\n\n" status;
  Printf.fprintf channel "%s\n" (translate_all phi);
  close_out channel
