(* Translation to input format of Grasshopper
 *
 * Author: Tomas Dacik (xdacik00@fit.vutbr.cz), 2022 *)

open SSL

module F = Format

(* Header that includes list specification *)
let header = {|
struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}
|}

(* Procedure header *)
let procedure_header phi =
  let signature = 
    SSL.get_vars phi
    |> List.filter (fun v -> not @@ SSL.Variable.is_nil v)
    |> List.map (fun v -> F.asprintf "%a : Node" SSL.Variable.pp v)
    |> String.concat ", "
  in
  F.asprintf "procedure formula(%s)" signature

let translate_var var = match var with
  | Variable.Var _ -> Variable.show var
  | Variable.Nil -> "null"

let rec translate = function
  | And (f1, f2) -> F.asprintf "(%s && %s)" (translate f1) (translate f2)
  | Or (f1, f2) -> F.asprintf "(%s || %s)" (translate f1) (translate f2)
  | Not f ->  F.asprintf "(!%s)\n" (translate f)
  | Star (f1, f2) ->  F.asprintf "(%s &*& %s)" (translate f1) (translate f2)
  | LS (v1, v2) -> F.asprintf "(lseg (%s, %s))" (translate_var v1) (translate_var v2)
  | PointsTo (v1, v2) -> F.asprintf "(%s.next |-> %s)" (translate_var v1) (translate_var v2)
  | Eq (v1, v2) -> F.asprintf "(%s == %s)" (translate_var v1) (translate_var v2)
  | Neq (v1, v2) -> F.asprintf "(%s != %s)" (translate_var v1) (translate_var v2)
  | GuardedNeg (f1, f2) ->  failwith "TODO"
  | Septraction (f1, f2) -> failwith "Not supported"

let procedure_pre phi = match phi with
  | GuardedNeg (pre, _) -> F.asprintf "requires %s" (translate pre)

let procedure_post phi = match phi with
  | GuardedNeg (_, post) -> F.asprintf "ensures %s" (translate post)

let translate_all phi =
  F.asprintf "// Generated by Astral\n%s\n\n%s\n\t%s\n\t%s\n{}"
    header
    (procedure_header phi)
    (procedure_pre phi)
    (procedure_post phi)

let dump file phi =
  let channel = open_out_gen [Open_creat; Open_wronly] 0o666 (file ^ ".spl") in
  Printf.fprintf channel "%s\n" (translate_all phi);
  close_out channel
