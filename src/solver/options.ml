(* Solver's options
 *
 * Author: Tomas Dacik (xdacik00@fit.vutbr.cz), 2021 *)

open Options_sig
open Backend_sig

let usage_msg = "astral [options] <input>"

(* ==== Input ==== *)

let _input_path = ref None
let input_path () = match !_input_path with
  | Some path -> path
  | None -> failwith "No input file was specified"

(* ==== Output ==== *)

let _debug = ref false
let debug () = !_debug

let _json_output_file = ref ""
let json_output_file () = !_json_output_file

(* ==== Additional features ==== *)

let _verify_model = ref false
let verify_model () = !_verify_model

let _unsat_core = ref false
let unsat_core () = !_unsat_core

(* ==== Translation options ==== *)

let _separation = ref "strong"
let strong_separation () = match !_separation with
  | "strong" -> true
  | "weak" -> false

let _location_bound = ref None
let set_location_bound x = _location_bound := Some x
let location_bound () = match !_location_bound with
  | None -> None
  | Some x ->
      if x > 0 then Some x
      else failwith "Location bound has to be positive integer"

let _list_bounds = ref true
let list_bounds () = !_local_bounds

let _incremental = ref true
let incremental () = !_incremental

let _sl_comp = ref false
let sl_comp () = !_sl_comp

(* ==== Quickcheck ==== *)

let _quickcheck_runs = ref 0
let set_quickcheck_runs x = _quickcheck_runs := x
let quickcheck_runs () = !_quickcheck_runs

let _quickcheck_store = ref false
let quickcheck_store () = !_quickcheck_store

(* ==== Profiling ==== *)

let _profile = ref false
let profile () = !_profile

(* ==== SMT Backend ==== *)

let _backend = ref "z3"
let backend () = match !_backend with
  | "cvc5" -> (module CVC5_backend : BACKEND)
  | "z3" -> (module Z3_backend : BACKEND)
  (*| "parallel" -> (module Parallel : BACKEND)*)
  | other -> failwith ("unknown backend `" ^ other ^ "`")

(* ==== Conversions and preprocessing ==== *)

let _out_path = ref ""
let output_path suffix = match !_out_path with
  | "" -> (input_path ()) ^ suffix
  | path -> path

let _convertor = ref "none"
let convertor () = match !_convertor with
  | "none" -> None
  | "sloth" -> Some ((module Sloth_convertor : CONVERTOR), output_path ".smt2")
  | "grasshopper" -> Some ((module Grasshopper_convertor : CONVERTOR), output_path ".spl")
  | "list_unfold" -> Some ((module Predicate_unfolding : CONVERTOR), output_path "_unfold.smt2")
  | other -> failwith ("unknown conversion option `" ^ other ^ "`")


let speclist =
  [
    ("--debug", Arg.Set _debug, "Print debug info");
    ("--verify-model", Arg.Set _verify_model, "Verify obtained model");
    ("--unsat-core", Arg.Set _unsat_core, "Print unsat core");
    ("--json-output", Arg.Set_string _json_output_file, "Store solver's result as json");
    ("--backend", Arg.Set_string _backend, "Backend SMT solver (default cvc5)");
    ("--no-list-bounds", Arg.Clear _local_bounds, "Do not use list-length bounds");
    ("--loc-bound", Arg.Int set_location_bound, "Force location bound");
    ("--separation", Arg.Set_string _separation, "Separation (weak | strong");
    ("--sl-comp", Arg.Set _sl_comp, "Preprocessing for SL-comp");
    ("--convertor", Arg.Set_string _convertor,
     "Convert input formula to other format (sloth | grasshopper | list_unfold)");
    ("--output", Arg.Set_string _out_path, "Output path of translation");
    ("--quickcheck", Arg.Int set_quickcheck_runs, "Run test on random formulae");
    ("--store", Arg.Set _quickcheck_store, "Store formulae generated by Quickcheck");
    ("--profile", Arg.Set _profile, "Print profiling information");

    (* Do not show '-help' *)
    ("-help", Arg.Unit ignore, "");
  ]

let input_fn filename = match filename with
  | "" -> failwith "No input file"
  | _ -> _input_path := Some filename

let json_output () = match !_json_output_file with
  | "" -> false
  | _ -> true

let exit_usage error =
  Arg.usage speclist usage_msg;
  exit error

let parse () = Arg.parse speclist input_fn usage_msg
